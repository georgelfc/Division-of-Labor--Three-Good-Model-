'''
Version 3
Operator 
Division of labor
Vipin P. Veetil
6/16/2014
Windows 
Python
'''

# import other files and libraries
import constants as c
import players as p
import random
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np


# make an empty list of players and a list of results
playerList = []
meanUtility=[]
sdUtility=[]
# list of proportion of agents who specialize
propSp_partial=[]
propSp_complete=[]


# populate the list of players with SocialPlayer
playerList = [p.simplePlayer() for count in xrange(c.numPlayers)]


# make an empty graph
G=nx.Graph()

# add nodes to the graph from playerlist
G.add_nodes_from(playerList)

# add edges

    
def add_edge():        
    sampleTwo=random.sample(G.node, 2)
    if len(G.neighbors(sampleTwo[0]))<2 and len(G.neighbors(sampleTwo[1]))<2:        
        if sampleTwo[0].myType!=sampleTwo[1].myType:
            n0=G.neighbors(sampleTwo[0])
            n1=G.neighbors(sampleTwo[1])
            if len(n0)==0 and len(n1)==0:        
                G.add_edge(sampleTwo[0], sampleTwo[1])
          
            elif len(n0)==1 and len(n1)==0:
                if n0[0].myType!=sampleTwo[1].myType:
                    G.add_edge(sampleTwo[0], sampleTwo[1])
            
            elif len(n0)==0 and len(n1)==1:
                if sampleTwo[0].myType!=n1[0].myType:
                    G.add_edge(sampleTwo[0], sampleTwo[1])
            
                    
            elif len(n0)==1 and len(n1)==1:            
                if n0[0].myType!=sampleTwo[1].myType and sampleTwo[0].myType!=n1[0].myType:
                    G.add_edge(sampleTwo[0], sampleTwo[1])
                    
            
            
         
def agents_act():
    for i in G.node:
        
        edgesList=[False,False,False]
        edgesList[i.myType]=True
        neighbors=G.neighbors(i)
        if len(neighbors)==1:
            edgesList[neighbors[0].myType]=True
        elif len(neighbors)==2:
            edgesList[neighbors[0].myType]=True
            edgesList[neighbors[1].myType]=True

        i.produce(edgesList)
        i.goodBasic=1.0
        
        
        count_partial=0.0
        count_complete=0.0
        
        for i in G.node:
            if i.specialize_partial==True:  
                count_partial=count_partial+1              
        
        for i in G.node:            
            if i.specialize_complete==True:
                count_complete=count_complete+1
                
                
        prop_partial=count_partial/c.numPlayers
        propSp_partial.append(prop_partial)
        
                        
        prop_complete=count_complete/c.numPlayers
        propSp_complete.append(prop_complete)        
        
def rearrangeGoods():
    for i in G.node:                
        neighbor=G.neighbors(i)               
       
        if len(neighbor)==1:
            neighbor[0].store[i.myType]=i.store[i.myType]/2.0
            i.store[i.myType]=i.store[i.myType]/2.0
            
        if len(neighbor)==2:
            neighbor[0].store[i.myType]=i.store[i.myType]/3.0
            neighbor[1].store[i.myType]=i.store[i.myType]/3.0
            i.store[i.myType]=i.store[i.myType]/3.0
            
                
    for i in G.node:
        i.consume()
        #print i.utilityHistory



def recordResult():
    listUtility=[]  
    for i in G.node:
        #print i.utilityHistory
        listUtility.append(i.utilityHistory[-1])
   
    mean=np.mean(listUtility)
    sd=np.std(listUtility)
    meanUtility.append(mean)
    sdUtility.append(sd)
    
    
def round():
    add_edge()
    agents_act()
    rearrangeGoods()
    recordResult()



def game():
    for i in range(c.periods):        
        round()
        if i==c.shockPeriod:
            select=random.sample(G.node,c.eliminateNodes)
            print select
            G.remove_nodes_from(select)
        print i

game()


nx.draw(G)
plt.show()


plt.plot(meanUtility,'.')
plt.xlabel('Periods')
plt.ylabel('Mean Utility/Fitness')
plt.show()



plt.plot(sdUtility,'.')
plt.xlabel('Periods')
plt.ylabel('Standard Deviation Utility/Fitness')
plt.show()

plt.plot(propSp_partial,'.')
plt.plot(propSp_complete,'.')
plt.xlabel('Periods')
plt.ylabel('Proportion of Agents who specialize')
plt.show()

